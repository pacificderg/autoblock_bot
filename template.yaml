AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  autoblock bot

  Telegram bot that implements a blacklist and a whitelist

Parameters:
  Stage:
    Type: String
    Description: The pipeline stage for this stack
    Default: 'beta'

Resources:
  RolesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "autoblock-bot-${Stage}-roles"
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
        - AttributeName: "role_users_pk"
          AttributeType: "S"
        - AttributeName: "role_users_sk"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: role_users
          KeySchema:
            - AttributeName: "role_users_pk"
              KeyType: "HASH"
            - AttributeName: "role_users_sk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ScraperOutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  AutoBlockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: autoblock_function/
      Handler: autoblock.app.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Timeout: 60
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref AutoBlockErrorAlarm
          - !Ref AutoBlockDurationAlarm
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RolesTable
        - S3ReadPolicy:
            BucketName: !Ref ScraperOutputBucket
        - CloudWatchPutMetricPolicy: {}
        - AmazonSSMReadOnlyAccess
      Environment:
        Variables:
          STAGE: !Ref Stage
          ROLE_TABLE_NAME: !Ref RolesTable
          ROLE_USERS_INDEX: role_users
          OUTPUT_BUCKET_NAME: !Ref ScraperOutputBucket
          APP_CONFIG_PATH: '/autoblock_bot'
      Events:
        Whitelist:
          Type: HttpApi
          Properties:
            Path: /whitelist
            Method: post
        Blacklist:
          Type: HttpApi
          Properties:
            Path: /blacklist
            Method: post

  BlocklistScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: autoblock_function/
      Handler: autoblock.blocklist_scraper.lambda_handler
      Runtime: python3.7
      MemorySize: 512
      Timeout: 900
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RolesTable
        - S3CrudPolicy:
            BucketName: !Ref ScraperOutputBucket
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          STAGE: !Ref Stage
          ROLE_TABLE_NAME: !Ref RolesTable
          ROLE_USERS_INDEX: role_users
          OUTPUT_BUCKET_NAME: !Ref ScraperOutputBucket
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: rate(7 days)
            Description: Periodically scrape the blocked users list

  AlarmPagerTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Retain
    Properties:
      DisplayName: autoblock-bot-pager
      KmsMasterKeyId: alias/aws/sns

  AutoBlockErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: More than zero autoblock lambda execution failures
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 0
      TreatMissingData: notBreaching
      Metrics:
        - Id: autoBlockErrors
          Label: AutoBlock lambda failures
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              Dimensions:
                - Name: FunctionName
                  Value: !Ref AutoBlockFunction
              MetricName: Errors
            Period: 300
            Stat: Sum
            Unit: Count

  AutoBlockDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Any execution longer than 30 seconds
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 30000 # 30 seconds
      TreatMissingData: notBreaching
      Metrics:
        - Id: autoBlockDuration
          Label: Autoblock execution duration
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              Dimensions:
                - Name: FunctionName
                  Value: !Ref AutoBlockFunction
              MetricName: Duration
            Period: 300
            Stat: Maximum
            Unit: Milliseconds

  BlocklistScraperErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: More than zero blocklist scraper lambda execution failures
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 0
      TreatMissingData: notBreaching
      Metrics:
        - Id: blocklistScraperErrors
          Label: BlocklistScraper lambda failures
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              Dimensions:
                - Name: FunctionName
                  Value: !Ref BlocklistScraperFunction
              MetricName: Errors
            Period: 300
            Stat: Sum
            Unit: Count

  BlocklistScraperDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Any execution longer than 5 minutes
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 300000 # 5 minutes
      TreatMissingData: notBreaching
      Metrics:
        - Id: blocklistScraperDuration
          Label: Autoblock execution duration
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              Dimensions:
                - Name: FunctionName
                  Value: !Ref BlocklistScraperFunction
              MetricName: Duration
            Period: 300
            Stat: Maximum
            Unit: Milliseconds

  ApiGatewayVolumeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: More than 150 requests within five minutes
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 150
      TreatMissingData: notBreaching
      Metrics:
        - Id: apiGatewayVolume
          Label: Api Gateway request volume
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              Dimensions:
                - Name: ApiName
                  Value: autoblock-bot
              MetricName: Count
            Period: 300
            Stat: Sum
            Unit: Count

  DynamoDBReadCapacityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: More than 2 read capacity units utilized
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 2
      TreatMissingData: notBreaching
      Metrics:
        - Id: readCapacity
          Label: DynamoDB read capacity used
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              Dimensions:
                - Name: TableName
                  Value: !Ref RolesTable
              MetricName: ConsumedReadCapacityUnits
            Period: 300
            Stat: Maximum
            Unit: Count

  DynamoDBWriteCapacityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: More than 2 write capacity units utilized
      AlarmActions:
        - !Ref AlarmPagerTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 2
      TreatMissingData: notBreaching
      Metrics:
        - Id: writeCapacity
          Label: DynamoDB write capacity used
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              Dimensions:
                - Name: TableName
                  Value: !Ref RolesTable
              MetricName: ConsumedWriteCapacityUnits
            Period: 300
            Stat: Maximum
            Unit: Count

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AutoBlockApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook/"
  AutoBlockFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt AutoBlockFunction.Arn
  AutoBlockFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt AutoBlockFunctionRole.Arn
  RolesTable:
    Description: "DynamoDB table containing role associations"
    Value: !GetAtt RolesTable.Arn
