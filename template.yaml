AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  autoblock bot

  Telegram bot that implements a blacklist and a whitelist

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  RolesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
        - AttributeName: "role_users_pk"
          AttributeType: "S"
        - AttributeName: "role_users_sk"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: role_users
          KeySchema:
            - AttributeName: "role_users_pk"
              KeyType: "HASH"
            - AttributeName: "role_users_sk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ScraperOutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  AutoBlockFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: autoblock_function/
      Handler: autoblock.app.lambda_handler
      Runtime: python3.7
      MemorySize: 256
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RolesTable
        - S3ReadPolicy:
            BucketName: !Ref ScraperOutputBucket
        - CloudWatchPutMetricPolicy: {}
        - AmazonSSMReadOnlyAccess
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RolesTable
          ROLE_USERS_INDEX: role_users
          OUTPUT_BUCKET_NAME: !Ref ScraperOutputBucket
          APP_CONFIG_PATH: '/autoblock_bot'
      Events:
        WebHook:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /webhook
            Method: post
        Whitelist:
          Type: Api
          Properties:
            Path: /whitelist
            Method: post
        Blacklist:
          Type: Api
          Properties:
            Path: /blacklist
            Method: post

  BlocklistScraperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: autoblock_function/
      Handler: autoblock.blocklist_scraper.lambda_handler
      Runtime: python3.7
      MemorySize: 512
      Timeout: 900
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RolesTable
        - S3CrudPolicy:
            BucketName: !Ref ScraperOutputBucket
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          ROLE_TABLE_NAME: !Ref RolesTable
          ROLE_USERS_INDEX: role_users
          OUTPUT_BUCKET_NAME: !Ref ScraperOutputBucket

  AutoScrapeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Periodically scrape the blocked users list"
      ScheduleExpression: rate(7 days)
      State: ENABLED
      Targets:
        - Arn: !GetAtt BlocklistScraperFunction.Arn
          Id: BlocklistScraperTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BlocklistScraperFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AutoScrapeRule.Arn


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AutoBlockApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook/"
  AutoBlockFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt AutoBlockFunction.Arn
  AutoBlockFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt AutoBlockFunctionRole.Arn
  RolesTable:
    Description: "DynamoDB table containing role associations"
    Value: !GetAtt RolesTable.Arn
